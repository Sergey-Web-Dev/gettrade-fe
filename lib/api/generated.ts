/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Music E-Commerce
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface UnauthorizedException { [key: string]: unknown }

export interface InternalServerErrorException { [key: string]: unknown }

export interface SignUpBodyDto {
  email: string;
  password: string;
}

export interface BadRequestException { [key: string]: unknown }

export interface GetSessionInfoDto {
  id: string;
  email: string;
}

export interface OrderItemBodyDto {
  quantity: number;
  price: number;
  productId: string;
  orderId: string;
  available: number;
}

export type UserInfoResponseDtoUserRole = typeof UserInfoResponseDtoUserRole[keyof typeof UserInfoResponseDtoUserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoResponseDtoUserRole = {
  ADMIN: 'ADMIN',
  CUSTOMER: 'CUSTOMER',
} as const;

export interface UserInfoResponseDto {
  id: string;
  userRole: UserInfoResponseDtoUserRole;
  email: string;
  name: string;
  location: string;
  shortBio: string;
  orders: OrderItemBodyDto[];
}

export interface ForgotPasswordRequestDto {
  email: string;
}

export interface ResetPasswordRequestDto {
  email: string;
  newPassword: string;
  repeatPassword: string;
}

export interface ChangePasswordRequestDto {
  id: string;
  oldPassword: string;
  repeatOldPassword: string;
  newPassword: string;
}

export interface UpdateUserDto {
  firstName: string;
  lastName: string;
  email: string;
  image: Blob;
  updatedAt: string;
}

export type UserControllerGetListOfUsersParams = {
page: number;
id: string;
direction: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Log in user into the system, if successful, the tokens will be set in the cookie
 */
export const authControllerSignIn = (
    signInBodyDto: BodyType<SignInBodyDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/auth/sign-in`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInBodyDto
    },
      options);
    }
  
/**
 * @summary User registration
 */
export const authControllerSignUp = (
    signUpBodyDto: BodyType<SignUpBodyDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<SignUpBodyDto>(
      {url: `/auth/sign-up`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpBodyDto
    },
      options);
    }
  
/**
 * @summary Log out user
 */
export const authControllerSignOut = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/auth/sign-out`, method: 'POST'
    },
      options);
    }
  
export const authControllerRefresh = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/auth/refresh`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Get user information
 */
export const authControllerGetSessionInfo = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<GetSessionInfoDto>(
      {url: `/auth/session-info`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get user profile info
 */
export const userControllerGetUserProfile = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<UserInfoResponseDto>(
      {url: `/users/user-profile`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary List of users for Admin
 */
export const userControllerGetListOfUsers = (
    params: UserControllerGetListOfUsersParams,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<UserInfoResponseDto[]>(
      {url: `/users/all-users`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get user role
 */
export const userControllerGetUserRole = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<string>(
      {url: `/users/user-role`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Forgot password endpoint
 */
export const userControllerForgotPassword = (
    forgotPasswordRequestDto: BodyType<ForgotPasswordRequestDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/users/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordRequestDto
    },
      options);
    }
  
/**
 * @summary Reset password endpoint after forgot password
 */
export const userControllerResetPassword = (
    resetPasswordRequestDto: BodyType<ResetPasswordRequestDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/users/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordRequestDto
    },
      options);
    }
  
/**
 * @summary Change password endpoint
 */
export const userControllerChangePassword = (
    changePasswordRequestDto: BodyType<ChangePasswordRequestDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/users/change-password`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: changePasswordRequestDto
    },
      options);
    }
  
/**
 * @summary Edit profile
 */
export const userControllerEditProfile = (
    updateUserDto: BodyType<UpdateUserDto>,
 options?: SecondParameter<typeof createInstance>,) => {const formData = new FormData();
formData.append(`firstName`, updateUserDto.firstName)
formData.append(`lastName`, updateUserDto.lastName)
formData.append(`email`, updateUserDto.email)
formData.append(`image`, updateUserDto.image)
formData.append(`updatedAt`, updateUserDto.updatedAt)

      return createInstance<UpdateUserDto>(
      {url: `/users/edit-profile`, method: 'PATCH',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const productControllerGetProducts = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/products`, method: 'GET'
    },
      options);
    }
  
export const productControllerGetProductById = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/products/${id}`, method: 'GET'
    },
      options);
    }
  
export const orderItemControllerAddToCart = (
    orderItemBodyDto: BodyType<OrderItemBodyDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/order-items/add-to-cart`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderItemBodyDto
    },
      options);
    }
  
export const orderItemControllerAddOrderItemProduct = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/order-items/add-one-product/${id}`, method: 'PATCH'
    },
      options);
    }
  
export const orderItemControllerRemoveOrderItemProduct = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/order-items/remove-one-product/${id}`, method: 'PATCH'
    },
      options);
    }
  
export const orderItemControllerRemoveFromCart = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/order-items/remove-from-cart/${id}`, method: 'DELETE'
    },
      options);
    }
  
export const orderControllerGetCart = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/orders/cart`, method: 'GET'
    },
      options);
    }
  
export const orderControllerRemoveFromOrder = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/orders/remove-from-order`, method: 'POST'
    },
      options);
    }
  
export const orderControllerClearOrder = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/orders/clear-order`, method: 'POST'
    },
      options);
    }
  
export const orderControllerGetHistory = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/orders/history`, method: 'GET'
    },
      options);
    }
  
export type AuthControllerSignInResult = NonNullable<Awaited<ReturnType<typeof authControllerSignIn>>>
export type AuthControllerSignUpResult = NonNullable<Awaited<ReturnType<typeof authControllerSignUp>>>
export type AuthControllerSignOutResult = NonNullable<Awaited<ReturnType<typeof authControllerSignOut>>>
export type AuthControllerRefreshResult = NonNullable<Awaited<ReturnType<typeof authControllerRefresh>>>
export type AuthControllerGetSessionInfoResult = NonNullable<Awaited<ReturnType<typeof authControllerGetSessionInfo>>>
export type UserControllerGetUserProfileResult = NonNullable<Awaited<ReturnType<typeof userControllerGetUserProfile>>>
export type UserControllerGetListOfUsersResult = NonNullable<Awaited<ReturnType<typeof userControllerGetListOfUsers>>>
export type UserControllerGetUserRoleResult = NonNullable<Awaited<ReturnType<typeof userControllerGetUserRole>>>
export type UserControllerForgotPasswordResult = NonNullable<Awaited<ReturnType<typeof userControllerForgotPassword>>>
export type UserControllerResetPasswordResult = NonNullable<Awaited<ReturnType<typeof userControllerResetPassword>>>
export type UserControllerChangePasswordResult = NonNullable<Awaited<ReturnType<typeof userControllerChangePassword>>>
export type UserControllerEditProfileResult = NonNullable<Awaited<ReturnType<typeof userControllerEditProfile>>>
export type ProductControllerGetProductsResult = NonNullable<Awaited<ReturnType<typeof productControllerGetProducts>>>
export type ProductControllerGetProductByIdResult = NonNullable<Awaited<ReturnType<typeof productControllerGetProductById>>>
export type OrderItemControllerAddToCartResult = NonNullable<Awaited<ReturnType<typeof orderItemControllerAddToCart>>>
export type OrderItemControllerAddOrderItemProductResult = NonNullable<Awaited<ReturnType<typeof orderItemControllerAddOrderItemProduct>>>
export type OrderItemControllerRemoveOrderItemProductResult = NonNullable<Awaited<ReturnType<typeof orderItemControllerRemoveOrderItemProduct>>>
export type OrderItemControllerRemoveFromCartResult = NonNullable<Awaited<ReturnType<typeof orderItemControllerRemoveFromCart>>>
export type OrderControllerGetCartResult = NonNullable<Awaited<ReturnType<typeof orderControllerGetCart>>>
export type OrderControllerRemoveFromOrderResult = NonNullable<Awaited<ReturnType<typeof orderControllerRemoveFromOrder>>>
export type OrderControllerClearOrderResult = NonNullable<Awaited<ReturnType<typeof orderControllerClearOrder>>>
export type OrderControllerGetHistoryResult = NonNullable<Awaited<ReturnType<typeof orderControllerGetHistory>>>
